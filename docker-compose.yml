services:
  stakeholders_service:
    build:
      context: ./services/stakeholders_service
      dockerfile: Dockerfile
    container_name: stakeholders_service
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres_db
    environment:
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  blogs_service:
    build:
      context: ./services/blogs_service
      dockerfile: Dockerfile
    container_name: blogs_service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongo_db
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tours_service: # dotnet ef migrations add InitialCreate - u terminali za tours_service
    build:
      context: ./services/tours_service
      dockerfile: Dockerfile
    container_name: tours_service
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - postgres_tours_db
    environment:
      POSTGRES_HOST: postgres_tours_db
      POSTGRES_PORT: 5433
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8082
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres_db:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    attach: false
    
  postgres_tours_db:
    container_name: postgres_tours_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
    volumes:
      - postgres_tours_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    attach: false

  followings_service:
    build:
      context: ./services/followings_service
      dockerfile: Dockerfile
    restart: always
    container_name: followings_service
    ports:
      - "9090:9090"
    depends_on:
      neo4j:
        condition: service_started
      stakeholders_service:
        condition: service_healthy
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:9090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  neo4j:
    container_name: neo4j_db
    image: neo4j:latest
    restart: always
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: "neo4j/password"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    attach: false
  
  mongo_db:
    container_name: mongo_db
    image: mongo:latest
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
    ports:
      - "27017:27017"
    attach: false
  
  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent overwriting node_modules
    environment:
      VITE_API_URL: http://localhost:5173
      VITE_STAKEHOLDERS_URL: http://localhost:8080/api
      VITE_BLOGS_URL: http://localhost:8081/api
      VITE_FOLLOWINGS_URL: http://localhost:9090/api
    depends_on:
      - stakeholders_service
      - blogs_service
      - followings_service

volumes:
  postgres_data:
    driver: local
  postgres_tours_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  mongo_data:
    driver: local
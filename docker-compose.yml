services:
  stakeholders_service:
    build:
      context: ./services/stakeholders_service
      dockerfile: Dockerfile
    container_name: stakeholders_service
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres_db
      - jaeger
    environment:
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=stakeholders"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  blogs_service:
    build:
      context: ./services/blogs_service
      dockerfile: Dockerfile
    container_name: blogs_service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongo_db
      - jaeger
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8081
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=blogs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tours_service: # dotnet ef migrations add InitialCreate - u terminali za tours_service
    build:       # dotnet ef database update - mozda?
      context: ./services/tours_service
      dockerfile: Dockerfile
    container_name: tours_service
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - postgres_tours_db
      - jaeger
    environment:
      POSTGRES_HOST: postgres_tours_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8082
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=tours"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres_db:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    attach: false
    
  postgres_tours_db:
    container_name: postgres_tours_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
    volumes:
      - postgres_tours_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    attach: false

  followings_service:
    build:
      context: ./services/followings_service
      dockerfile: Dockerfile
    restart: always
    container_name: followings_service
    ports:
      - "8083:9090"
    depends_on:
      neo4j:
        condition: service_started
      stakeholders_service:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:9090
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=followings"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  neo4j:
    container_name: neo4j_db
    image: neo4j:latest
    restart: always
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: "neo4j/password"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    attach: false
  
  mongo_db:
    container_name: mongo_db
    image: mongo:latest
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
    ports:
      - "27017:27017"
    attach: false
  
  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent overwriting node_modules
    environment:
      VITE_API_URL: http://localhost:5173
      VITE_STAKEHOLDERS_URL: http://localhost:8080/api
      VITE_BLOGS_URL: http://localhost:8081/api
      VITE_FOLLOWINGS_URL: http://localhost:8083/api
      VITE_TOURS_URL: http://localhost:8082/api
    depends_on:
      - stakeholders_service
      - blogs_service
      - followings_service
      - tours_service

  # ===============================================
  # MONITORING, LOGGING & TRACING INFRASTRUCTURE
  # ===============================================
  
  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    ports:
      - "14268:14268"   # jaeger.thrift collector
      - "16686:16686"   # Web UI
      - "6831:6831/udp" # jaeger.thrift compact
      - "6832:6832/udp" # jaeger.thrift binary
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Node Exporter - Host System Metrics (CPU, RAM, Disk, Network)
  # Note: For Windows Docker Desktop, using regular network mode instead of host
  node_exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'  
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.cpu'
      - '--collector.meminfo'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.netdev'
      - '--collector.loadavg'

  # cAdvisor - Docker Container Metrics (CPU, RAM, Disk, Network per container)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8084:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_tours_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
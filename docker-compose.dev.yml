services:
  api_gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile.dev
    container_name: api_gateway_dev
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - ./gateway:/app
      - /app/node_modules
    depends_on:
      stakeholders_service:
        condition: service_healthy
      blogs_service:
        condition: service_healthy
      tours_service:
        condition: service_healthy
      followings_service:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      BLOGS_SERVICE_URL: http://blogs_service:8081
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      STAKEHOLDERS_SERVICE_URL: http://stakeholders_service:8080
      TOURS_SERVICE_URL: http://tours_service:8082
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      ALLOWED_ORIGINS: http://localhost:5173,http://localhost:3001
      LOG_LEVEL: debug
    command: npm run dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=gateway-dev"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
#  ///////////////////////////////////////////////////////////////////////////////
  gateway_net:
    build:
      context: ./gateway-net
      dockerfile: Dockerfile
    container_name: gateway_net_dev
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      stakeholders_service:
        condition: service_healthy
      blogs_service:
        condition: service_healthy
      tours_service:
        condition: service_healthy
      followings_service:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8084
      BLOGS_SERVICE_URL: http://blogs_service:8081
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      STAKEHOLDERS_SERVICE_URL: http://stakeholders_service:8080
      TOURS_SERVICE_URL: http://tours_service:8083
      #TOURS_SERVICE_URL: http://tours_service:8082
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=gateway-net-dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  stakeholders_service:
    build:
      context: ./services/stakeholders_service
      dockerfile: Dockerfile
    container_name: stakeholders_service
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres_db
      - jaeger
    environment:
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=stakeholders"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  blogs_service:
    build:
      context: ./services/blogs_service
      dockerfile: Dockerfile
    container_name: blogs_service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongo_db
      - jaeger
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8081
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=blogs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tours_service: # dotnet ef migrations add InitialCreate - u terminali za tours_service
    build:       # dotnet ef database update - mozda?
      context: .
      dockerfile: ./services/tours_service/Dockerfile
    container_name: tours_service
    restart: always
    ports:
      - "8082:8082"  # HTTP API
      - "8083:8083"  # gRPC
    depends_on:
      - postgres_tours_db
      - jaeger
    environment:
      POSTGRES_HOST: postgres_tours_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
      ASPNETCORE_ENVIRONMENT: Development
      #ASPNETCORE_URLS: http://+:8082;http://+:8083
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=tours"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres_db:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    attach: false
    
  postgres_tours_db:
    container_name: postgres_tours_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
    volumes:
      - postgres_tours_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    attach: false

  followings_service:
    build:
      context: ./services/followings_service
      dockerfile: Dockerfile
    restart: always
    container_name: followings_service
    ports:
      - "9090:9090"
    depends_on:
      neo4j:
        condition: service_started
      stakeholders_service:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:9090
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=followings"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  neo4j:
    container_name: neo4j_db
    image: neo4j:latest
    restart: always
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: "neo4j/password"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    attach: false
  #///////////////////////////////////////////////////////////////////////////////
  mongo_db:
    container_name: mongo_db
    image: mongo:latest
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
    ports:
      - "27017:27017"
    attach: false
  
  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent overwriting node_modules
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_GATEWAY_NET_URL: http://localhost:8084/api
      VITE_STAKEHOLDERS_URL: http://localhost:3001/api/stakeholders
      VITE_BLOGS_URL: http://localhost:3001/api/blogs
      VITE_FOLLOWINGS_URL: http://localhost:3001/api/followings
      VITE_TOURS_URL: http://localhost:3001/api/tours
    depends_on:
      - api_gateway

  # Jaeger - potreban jer servisi imaju hardkodovanu Jaeger konfiguraciju
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    ports:
      - "14268:14268"   # jaeger.thrift collector
      - "16686:16686"   # Web UI
      - "6831:6831/udp" # jaeger.thrift compact
      - "6832:6832/udp" # jaeger.thrift binary
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_tours_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  mongo_data:
    driver: local
# Development Docker Compose Configuration
#
# This configuration includes all services needed for development.
# 
# Usage:
#   - Default services (without monitoring): docker compose -f docker-compose.dev.yml up -d
#   - With monitoring services: docker compose -f docker-compose.dev.yml --profile monitoring up -d
#
# Monitoring Services (available with --profile monitoring):
#   - Prometheus (metrics): http://localhost:9091
#   - Grafana (dashboards): http://localhost:3000 (admin/admin)
#   - Elasticsearch (logs): http://localhost:9200
#   - Kibana (log visualization): http://localhost:5601
#   - Node Exporter (host metrics): http://localhost:9100
#   - cAdvisor (container metrics): http://localhost:8086
#
# Always available services:
#   - Jaeger (tracing): http://localhost:16686
#   - API Gateway: http://localhost:3001
#   - .NET Gateway: http://localhost:8084
#   - Frontend: http://localhost:5173

services:
  api_gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile.dev
    container_name: api_gateway_dev
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - ./gateway:/app
      - /app/node_modules
    depends_on:
      stakeholders_service:
        condition: service_healthy
      blogs_service:
        condition: service_healthy
      tours_service:
        condition: service_healthy
      followings_service:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3000
      BLOGS_SERVICE_URL: http://blogs_service:8081
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      STAKEHOLDERS_SERVICE_URL: http://stakeholders_service:8080
      TOURS_SERVICE_URL: http://tours_service:8082
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
      ALLOWED_ORIGINS: http://localhost:5173,http://localhost:3001
      LOG_LEVEL: debug
    command: npm run dev
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=gateway-dev"
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - soa_network

  gateway_net:
    build:
      context: ./gateway-net
      dockerfile: Dockerfile
    container_name: gateway_net_dev
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      stakeholders_service:
        condition: service_healthy
      blogs_service:
        condition: service_healthy
      tours_service:
        condition: service_healthy
      followings_service:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8084
      BLOGS_SERVICE_URL: http://blogs_service:8081
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      STAKEHOLDERS_SERVICE_URL: http://stakeholders_service:8080
      TOURS_SERVICE_URL: http://tours_service:8083
      #TOURS_SERVICE_URL: http://tours_service:8082
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=gateway-net-dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - soa_network

  stakeholders_service:
    build:
      context: ./services/stakeholders_service
      dockerfile: Dockerfile
    container_name: stakeholders_service
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres_db
      - jaeger
    environment:
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
      FOLLOWINGS_SERVICE_URL: http://followings_service:9090
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=stakeholders"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - soa_network

  blogs_service:
    build:
      context: ./services/blogs_service
      dockerfile: Dockerfile
    container_name: blogs_service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongo_db
      - jaeger
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8081
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=blogs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - soa_network

  tours_service: # dotnet ef migrations add InitialCreate - u terminali za tours_service
    build:       # dotnet ef database update - mozda?
      context: .
      dockerfile: ./services/tours_service/Dockerfile
    container_name: tours_service
    restart: always
    ports:
      - "8082:8082"  # HTTP API
      - "8083:8083"  # gRPC
    depends_on:
      - postgres_tours_db
      - jaeger
    environment:
      POSTGRES_HOST: postgres_tours_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
      ASPNETCORE_ENVIRONMENT: Development
      #ASPNETCORE_URLS: http://+:8082;http://+:8083
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=tours"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - soa_network

  postgres_db:
    container_name: postgres_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stakeholders_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    attach: false
    networks:
      - soa_network
    
  postgres_tours_db:
    container_name: postgres_tours_db
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tours_db
    volumes:
      - postgres_tours_data:/var/lib/postgresql/data
      - ./database/starter.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    attach: false
    networks:
      - soa_network

  followings_service:
    build:
      context: ./services/followings_service
      dockerfile: Dockerfile
    restart: always
    container_name: followings_service
    ports:
      - "9090:9090"
    depends_on:
      neo4j:
        condition: service_started
      stakeholders_service:
        condition: service_healthy
      jaeger:
        condition: service_started
    environment:
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:9090
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
      JAEGER_SAMPLER_TYPE: const
      JAEGER_SAMPLER_PARAM: 1
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=followings"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - soa_network

  neo4j:
    container_name: neo4j_db
    image: neo4j:latest
    restart: always
    ports:
      - "7474:7474" # Web UI
      - "7687:7687" # Bolt protocol
    environment:
      NEO4J_AUTH: "neo4j/password"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    attach: false
    networks:
      - soa_network
  
  mongo_db:
    container_name: mongo_db
    image: mongo:latest
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_HOST: mongo_db
      MONGO_PORT: 27017
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blogs_db
    ports:
      - "27017:27017"
    attach: false
    networks:
      - soa_network
  
  frontend-app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules # Prevent overwriting node_modules
    environment:
      VITE_API_URL: http://localhost:3001/api
      VITE_GATEWAY_NET_URL: http://localhost:8084/api
      VITE_STAKEHOLDERS_URL: http://localhost:3001/api/stakeholders
      VITE_BLOGS_URL: http://localhost:3001/api/blogs
      VITE_FOLLOWINGS_URL: http://localhost:3001/api/followings
      VITE_TOURS_URL: http://localhost:3001/api/tours
    depends_on:
      - api_gateway
    networks:
      - soa_network

  # Jaeger - potreban jer servisi imaju hardkodovanu Jaeger konfiguraciju
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    ports:
      - "14268:14268"   # jaeger.thrift collector
      - "16686:16686"   # Web UI
      - "6831:6831/udp" # jaeger.thrift compact
      - "6832:6832/udp" # jaeger.thrift binary
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped
    networks:
      - soa_network

  # ===============================================
  # MONITORING, LOGGING & TRACING INFRASTRUCTURE
  # ===============================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - soa_network
    profiles:
      - monitoring

  # Node Exporter - Host System Metrics (CPU, RAM, Disk, Network)
  # Note: For Windows Docker Desktop, using regular network mode instead of host
  node_exporter:
    image: prom/node-exporter:v1.6.0
    container_name: node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'  
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.cpu'
      - '--collector.meminfo'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.netdev'
      - '--collector.loadavg'
    networks:
      - soa_network
    profiles:
      - monitoring

  # cAdvisor - Docker Container Metrics (CPU, RAM, Disk, Network per container)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8086:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
      - '--store_container_labels=false'
    networks:
      - soa_network
    profiles:
      - monitoring

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - soa_network
    profiles:
      - monitoring

  # ===============================================
  # ELK STACK - CENTRALIZED LOGGING
  # ===============================================
  
  # Elasticsearch - Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - soa_network
    profiles:
      - monitoring

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
    environment:
      - LS_JAVA_OPTS=-Xmx512m -Xms512m
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - soa_network
    profiles:
      - monitoring

  # Kibana - Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - soa_network
    profiles:
      - monitoring

  # Filebeat - Log Shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: filebeat
    user: root
    volumes:
      - ./monitoring/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - logstash
    restart: unless-stopped
    networks:
      - soa_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  postgres_tours_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  soa_network:
    driver: bridge